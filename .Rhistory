labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal()
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles), color = "blue", size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles), color = "red", size = 3, shape = 1) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
subtitle = "Cauchy: blue, Normal: red") +
# Instale e carregue o pacote ggplot2
library(ggplot2)
# Instale e carregue o pacote ggplot2
library(ggplot2)
# Defina a semente
set.seed(1693)
# Gere a amostra de Cauchy
n <- 101
location <- -3.2
scale <- 2
sample_cauchy <- rcauchy(n, location, scale)
# Ordene a amostra
sample_sorted <- sort(sample_cauchy)
# Calcule os quantis de probabilidade
quantiles <- (1:n) / (n + 1)
cauchy_quantiles <- qcauchy(quantiles, location, scale)
normal_quantiles <- qnorm(quantiles, mean = 0.6, sd = sqrt(2.4))
# Crie o gráfico
df <- data.frame(sample_sorted, cauchy_quantiles, normal_quantiles)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles), color = "blue", size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles), color = "red", size = 3, shape = 1) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
subtitle = "Cauchy: blue, Normal: red") +
# Crie o gráfico
df <- data.frame(sample_sorted, cauchy_quantiles, normal_quantiles)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles), color = "blue", size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles), color = "red", size = 3, shape = 1) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal",
subtitle = "Cauchy: blue, Normal: red") +
theme_minimal()
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal()
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal()
# Instale e carregue o pacote ggplot2
library(ggplot2)
# Defina a semente
set.seed(1693)
# Gere a amostra de Cauchy
n <- 101
location <- -3.2
scale <- 2
sample_cauchy <- rcauchy(n, location, scale)
# Ordene a amostra
sample_sorted <- sort(sample_cauchy)
# Calcule os quantis de probabilidade
quantiles <- (1:n) / (n + 1)
cauchy_quantiles <- qcauchy(quantiles, location, scale)
normal_quantiles <- qnorm(quantiles, mean = 0.6, sd = sqrt(2.4))
# Crie o gráfico
df <- data.frame(sample_sorted, cauchy_quantiles, normal_quantiles)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal()
set.seed(1637)
# Gere a amostra de Cauchy
n <- 141
location <- 1.2
scale <- 1.6
sample_cauchy <- rcauchy(n, location, scale)
# Ordene a amostra
sample_sorted <- sort(sample_cauchy)
# Calcule os quantis de probabilidade
quantiles <- (1:n) / (n + 1)
cauchy_quantiles <- qcauchy(quantiles, location, scale)
normal_quantiles <- qnorm(quantiles, mean = 2.2, sd = sqrt(3.6))
# Crie o gráfico
df <- data.frame(sample_sorted, cauchy_quantiles, normal_quantiles)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal()
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-40, 40)
ggplot
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles), color = "blue", size = 2, shape = 1) +
geom_point(aes(y = normal_quantiles), color = "red", size = 2, shape = 1) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30) +
ylim(-30, 30)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles), color = "blue", size = 2, shape = 1) +
geom_point(aes(y = normal_quantiles), color = "red", size = 2, shape = 1) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30) +
ylim(-40, 40)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30) +
ylim(-30, 30)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30) +
ylim(-40, 40)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30) +
ylim(-30, 30)
library(ggplot2)
set.seed(1637)
# Gere a amostra de Cauchy
n <- 141
location <- 1.2
scale <- 1.6
sample_cauchy <- rcauchy(n, location, scale)
# Ordene a amostra
sample_sorted <- sort(sample_cauchy)
# Calcule os quantis de probabilidade
quantiles <- (1:n) / (n + 1)
cauchy_quantiles <- qcauchy(quantiles, location, scale)
normal_quantiles <- qnorm(quantiles, mean = 2.2, sd = sqrt(3.6))
# Crie o gráfico
df <- data.frame(sample_sorted, cauchy_quantiles, normal_quantiles)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() +
xlim(-30, 30) +
ylim(-30, 30)
library(ggplot2)
set.seed(1637)
n <- 141
location <- 1.2
scale <- 1.6
sample_cauchy <- rcauchy(n, location, scale)
sample_sorted <- sort(sample_cauchy)
quantiles <- (1:n) / (n + 1)
cauchy_quantiles <- qcauchy(quantiles, location, scale)
normal_quantiles <- qnorm(quantiles, mean = 2.2, sd = sqrt(3.6))
df <- data.frame(sample_sorted, cauchy_quantiles, normal_quantiles)
ggplot(df, aes(x = sample_sorted)) +
geom_point(aes(y = cauchy_quantiles, color = "Cauchy"), size = 3, shape = 1) +
geom_point(aes(y = normal_quantiles, color = "Normal"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(x = "Valores gerados ordenados",
y = "Quantis de probabilidade",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() + xlim(-30, 30) + ylim(-30, 30)
library(ggplot2)
set.seed(1637)
n <- 141
location <- 1.2
scale <- 1.6
sampleCauchy <- rcauchy(n, location, scale)
sampleSorted <- sort(sampleCauchy)
quantiles <- (1:n) / (n + 1)
cauchyQuantiles <- qcauchy(quantiles, location, scale)
normalQuantiles <- qnorm(quantiles, mean = 2.2, sd = sqrt(3.6))
df <- data.frame(sampleSorted, cauchyQuantiles, normalQuantiles)
ggplot(df, aes(x = sampleSorted)) +
geom_point(aes(y = normalQuantiles, color = "Normal"), size = 3, shape = 1) +
geom_point(aes(y = cauchyQuantiles, color = "Cauchy"), size = 3, shape = 1) +
scale_color_manual(name = "Variáveis", values = c("Cauchy" = "blue", "Normal" = "red")) +
geom_abline(intercept = 0, slope = 1, color = "green", linetype = "dashed") +
labs(y = "Quantis de probabilidade",
x = "Valores gerados ordenados",
title = "Comparação entre distribuições Cauchy e Normal") +
theme_minimal() + xlim(-30, 30) + ylim(-30, 30)
#Bing Chilling
set.seed(1296)
n_values <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.3
gamma <- 0.97
z <- qnorm((1 + gamma) / 2)
mean_diffs <- numeric(length(n_values))
for (i in seq_along(n_values)) {
n <- n_values[i]
diffs <- numeric(k)
for (j in 1:k) {
sample_x <- rbinom(n, size = 1, prob = p)
sample_mean <- mean(sample_x)
se1 <- sqrt(p * (1 - p) / n)
se2 <- sqrt(sample_mean * (1 - sample_mean) / n)
ci1_length <- 2 * z * se1
ci2_length <- 2 * z * se2
diffs[j] <- ci1_length - ci2_length
}
mean_diffs[i] <- mean(diffs)
}
plot(n_values, mean_diffs, type = "b", xlab = "Sample size", ylab = "Mean difference in CI length")
set.seed(1296)
n_values <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.3
gamma <- 0.97
z <- qnorm((1 + gamma) / 2)
mean_diffs <- numeric(length(n_values))
for (i in seq_along(n_values)) {
n <- n_values[i]
diffs <- numeric(k)
for (j in 1:k) {
sample_x <- rbinom(n, size = 1, prob = p)
sample_mean <- mean(sample_x)
# Method 1
a <- 1 + (z^2)/n
b <- -2 * sample_mean - (z^2)/n
mean_squared <- sample_mean^2
roots <- (-b + c(-1, 1) * sqrt(b^2 - 4 * a * mean_squared)) / (2 * a)
ci_1_length <- diff(roots)
# Method 2
ci_2_length <- diff(sample_mean + c(-1, 1) * z * sqrt(sample_mean * (1 - sample_mean) / n))
diffs[j] <- ci_2_length - ci_1_length
}
mean_diffs[i] <- mean(diffs)
}
plot(n_values, mean_diffs, type = "b", xlab = "Sample size", ylab = "Mean difference in CI length")
set.seed(1296)
nValues <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.3
gamma <- 0.97
z <- qnorm((1 + gamma) / 2)
meanDiffs <- numeric(length(nValues))
for (i in seq_along(nValues)) {
n <- nValues[i]
diffs <- numeric(k)
for (j in 1:k) {
sampleX <- rbinom(n, size = 1, prob = p)
sampleMean <- mean(sampleX)
# Method 1
a <- 1 + (z^2)/n
b <- -2 * sampleMean - (z^2)/n
meanSquared <- sampleMean^2
roots <- (-b + c(-1, 1) * sqrt(b^2 - 4 * a * meanSquared)) / (2 * a)
ci_1_length <- diff(roots)
# Method 2
ci_2_length <- diff(sampleMean + c(-1, 1) * z * sqrt(sampleMean * (1 - sampleMean) / n))
diffs[j] <- ci_2_length - ci_1_length
}
meanDiffs[i] <- mean(diffs)
}
plot(nValues, meanDiffs, type = "b", xlab = "Sample size", ylab = "Mean difference in CI length")
set.seed(1296)
nValues <- c(30, 50, 100, 200, 300, 500, 1000)
k <- 3000
p <- 0.3
gamma <- 0.97
z <- qnorm((1 + gamma) / 2)
meanDiffs <- numeric(length(nValues))
for (i in seq_along(nValues)) {
n <- nValues[i]
diffs <- numeric(k)
for (j in 1:k) {
sampleX <- rbinom(n, size = 1, prob = p)
sampleMean <- mean(sampleX)
# Method 1
a <- 1 + (z^2)/n
b <- -2 * sampleMean - (z^2)/n
meanSquared <- sampleMean^2
roots <- (-b + c(-1, 1) * sqrt(b^2 - 4 * a * meanSquared)) / (2 * a)
ci_1_length <- diff(roots)
# Method 2
ci_2_length <- diff(sampleMean + c(-1, 1) * z * sqrt(sampleMean * (1 - sampleMean) / n))
diffs[j] <- ci_2_length - ci_1_length
}
meanDiffs[i] <- mean(diffs)
}
plot(nValues, meanDiffs, type = "b", xlab = "Sample size", ylab = "Mean difference in CI length")
# Definir parâmetros
null_value <- 71.4
mu <- 72.6
sigma <- sqrt(4)
n <- 31
m <- 100
alpha <- 0.1
# Definir semente
set.seed(615)
# Gerar m amostras e realizar o teste de hipóteses para cada amostra
not_rejected <- 0
for (i in 1:m) {
sample <- rnorm(n, mean = mu, sd = sigma)
x_bar <- mean(sample)
z <- (x_bar - null_value) / (sigma / sqrt(n))
p_value <- 2 * (1 - pnorm(abs(z)))
# Verificar se a hipótese nula não foi rejeitada
if (p_value > alpha) {
not_rejected <- not_rejected + 1
}
}
# Calcular a proporção de vezes que a hipótese nula não foi rejeitada
prob_not_rejected <- not_rejected / m
round(prob_not_rejected, 3)
# Definir parâmetros
null_value <- 23.7
mu <- 25.1
sigma <- sqrt(4)
n <- 44
m <- 300
alpha <- 0.04
# Definir semente
set.seed(443)
# Gerar m amostras e realizar o teste de hipóteses para cada amostra
not_rejected <- 0
for (i in 1:m) {
sample <- rnorm(n, mean = mu, sd = sigma)
x_bar <- mean(sample)
z <- (x_bar - null_value) / (sigma / sqrt(n))
p_value <- 2 * (1 - pnorm(abs(z)))
# Verificar se a hipótese nula não foi rejeitada
if (p_value > alpha) {
not_rejected <- not_rejected + 1
}
}
# Calcular a proporção de vezes que a hipótese nula não foi rejeitada
prob_not_rejected <- not_rejected / m
round(prob_not_rejected, 3)
# Definir parâmetros
null_value <- 25.1
mu <- 23.7
sigma <- sqrt(4)
n <- 44
m <- 300
alpha <- 0.04
# Definir semente
set.seed(443)
# Gerar m amostras e realizar o teste de hipóteses para cada amostra
not_rejected <- 0
for (i in 1:m) {
sample <- rnorm(n, mean = mu, sd = sigma)
x_bar <- mean(sample)
z <- (x_bar - null_value) / (sigma / sqrt(n))
p_value <- 2 * (1 - pnorm(abs(z)))
# Verificar se a hipótese nula não foi rejeitada
if (p_value > alpha) {
not_rejected <- not_rejected + 1
}
}
# Calcular a proporção de vezes que a hipótese nula não foi rejeitada
prob_not_rejected <- not_rejected / m
round(prob_not_rejected, 3)
# Definir parâmetros
null_value <- 23.7
mu <- 25.1
sigma <- sqrt(4)
n <- 44
m <- 300
alpha <- 0.04
# Definir semente
set.seed(443)
# Gerar m amostras e realizar o teste de hipóteses para cada amostra
not_rejected <- 0
for (i in 1:m) {
sample <- rnorm(n, mean = mu, sd = sigma)
x_bar <- mean(sample)
z <- (x_bar - null_value) / (sigma / sqrt(n))
p_value <- 2 * (1 - pnorm(abs(z)))
# Verificar se a hipótese nula não foi rejeitada
if (p_value > alpha) {
not_rejected <- not_rejected + 1
}
}
# Calcular a proporção de vezes que a hipótese nula não foi rejeitada
prob_not_rejected <- not_rejected / m
round(prob_not_rejected, 3)
benford_prob <- function(x) {
log10(1 + 1/x)
}
prob_5_or_7 <- benford_prob(5) + benford_prob(7)
count_5_or_7 <- 0
for (i in 3:30) {
first_digit <- as.numeric(substr(as.character(2^i), 1, 1))
if (first_digit == 5 || first_digit == 7) {
count_5_or_7 <- count_5_or_7 + 1
}
}
fraction_5_or_7 <- count_5_or_7 / (30 - 3 + 1)
abs_difference <- abs(prob_5_or_7 - fraction_5_or_7)
rounded_abs_difference <- round(abs_difference, 4)
cat("1. Probability of x being equal to 5 or 7: ", prob_5_or_7, "\n")
cat("2. Fraction of powers of two with the first digit being 5 or 7: ", fraction_5_or_7, "\n")
cat("3. Absolute difference between the values: ", abs_difference, "\n")
cat("4. Rounded absolute difference: ", rounded_abs_difference, "\n")
set.seed(1126)
p <- 0.3
n <- 1041
u <- runif(n)
x <- floor(log(1-u)/log(1-p))-1
mean_x <- mean(x)
sd_x <- sd(x)
prop <- sum(x > mean_x + sd_x)/sum(x > mean_x)
round(prop, 4)
set.seed(2315)
k <- 1396
lambda <- 10.5
x <- rexp(k, lambda)
s <- cumsum(x)
T <- ceiling(s[k])
mean_num_events <- k / T
expected_num_events <- lambda
abs_deviation <- abs(mean_num_events - expected_num_events)
round(abs_deviation, 4)
set.seed
set.seed
set.seed
set.seed(1473)
m <- 1621
n <- 19
ssq <- replicate(m, sum(rnorm(n, mean = 0, sd = 1)^2))
q1 <- quantile(ssq, probs = 0.3, type = 2)
q2 <- qchisq(0.3, df = n)
diff <- abs(q1 - q2)
round(diff, 4)
